{"version":3,"file":null,"sources":["../src/event_aggregator.js","../src/constant.js","../src/metadata_reflector.js","../src/metadata_resolver.js","../src/batscanner_module.js","../src/index.js"],"sourcesContent":["//\n\nexport class BatscannerEventAggregator {\n\n}\n","//\n\nexport const HAS_RUNTIME_METADATA_RESOLVER_HOOK = '__HAS_RUNTIME_METADATA_RESOLVER_HOOK__' // Make this a symbol\nexport const IS_PART_OF_THE_DEBUGGER = '__IS_PART_OF_THE_DEBUGGER__'\nexport const BATSCANNER_ID = '__BATSCANNER_ID__'\nexport const BATSCANNER_RECORD = '__BATSCANNER_RECORD__'\n","//\n\nimport {\n  IS_PART_OF_THE_DEBUGGER,\n  HAS_RUNTIME_METADATA_RESOLVER_HOOK\n} from './constant.js'\n\n//\n\nexport function needToBeScaned (directiveType) {\n  let requireRuntimeMetadataResolverHooks = true\n  requireRuntimeMetadataResolverHooks = requireRuntimeMetadataResolverHooks && !directiveType[IS_PART_OF_THE_DEBUGGER]\n  requireRuntimeMetadataResolverHooks = requireRuntimeMetadataResolverHooks && !directiveType[HAS_RUNTIME_METADATA_RESOLVER_HOOK]\n\n  return requireRuntimeMetadataResolverHooks\n}\n\nexport function markAsScaned (directiveType) {\n  directiveType[HAS_RUNTIME_METADATA_RESOLVER_HOOK] = true\n}\n","//\n\nimport {\n  __compiler_private__ as ngCompilerPrivateParts // eslint-disable-line camelcase\n} from '@angular/compiler'\n\nimport {Injector, resolveForwardRef} from '@angular/core'\n\nimport {BatscannerEventAggregator} from './event_aggregator.js'\nimport {needToBeScaned, markAsScaned} from './metadata_reflector.js'\n\n//\n\nconst { CompileMetadataResolver } = ngCompilerPrivateParts\n\n//\n\nexport class BatScannerCompileMetadataResolver extends CompileMetadataResolver {\n  constructor (\n    // HACK(@douglasduteil): Force inject the injector in the CompileMetadataResolver\n    _injector,\n    //\n    _ngModuleResolver,\n    _directiveResolver,\n    _pipeResolver,\n    _viewResolver,\n    _config,\n    _console,\n    _reflector\n  ) {\n    super(\n      _ngModuleResolver,\n      _directiveResolver,\n      _pipeResolver,\n      _viewResolver,\n      _config,\n      _console,\n      _reflector\n    )\n    this._eventAggregator = _injector.get(BatscannerEventAggregator)\n  }\n\n  getDirectiveMetadata (directiveType, throwIfNotFound) {\n    directiveType = resolveForwardRef(directiveType);\n    const meta = this._directiveCache.get(directiveType);\n\n    if (!meta || !needToBeScaned(directiveType)) {\n      return super.getDirectiveMetadata(directiveType, throwIfNotFound)\n    }\n\n    // directiveType.prototype = wrapAllLifeCyleHooksOf(directiveType)\n\n    markAsScaned(directiveType)\n\n    return super.getDirectiveMetadata(directiveType, throwIfNotFound)\n  }\n}\n\nBatScannerCompileMetadataResolver.ctorParameters =\n  // Copy CompileMetadataResolver.ctorParameters\n  CompileMetadataResolver.ctorParameters.map((token) => ({type: token.type}))\nBatScannerCompileMetadataResolver.ctorParameters.unshift({ type: Injector })\n","//\n\nimport {\n  __compiler_private__ as ngCompilerPrivateParts // eslint-disable-line camelcase\n} from '@angular/compiler'\n\nimport {BatScannerCompileMetadataResolver} from './metadata_resolver.js'\nimport {BatscannerEventAggregator} from './event_aggregator.js'\n\n//\n\nconst { CompileMetadataResolver } = ngCompilerPrivateParts\n\n//\n\nexport const BATSCANNER_ROOT_COMPONENT = 'BATSCANNER_ROOT_COMPONENT'\n\nexport const BATSCANNER_PROVIDERS = [\n  {provide: CompileMetadataResolver, useClass: BatScannerCompileMetadataResolver},\n\n  BatscannerEventAggregator\n]\n","//\n\nexport * from './batscanner_module.js'\n\n//\n"],"names":["BatscannerEventAggregator","HAS_RUNTIME_METADATA_RESOLVER_HOOK","IS_PART_OF_THE_DEBUGGER","needToBeScaned","directiveType","requireRuntimeMetadataResolverHooks","markAsScaned","CompileMetadataResolver","ngCompilerPrivateParts","BatScannerCompileMetadataResolver","_directiveResolver","_pipeResolver","_viewResolver","_config","_console","_reflector","_ngModuleResolver","_eventAggregator","_injector","get","throwIfNotFound","resolveForwardRef","meta","_directiveCache","ctorParameters","map","token","type","unshift","Injector","BATSCANNER_ROOT_COMPONENT","BATSCANNER_PROVIDERS","provide","useClass"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA,IAAaA,yBAAb;;;;ACFA;;AAEA,AAAO,IAAMC,qCAAqC,wCAA3C;AACP,AAAO,IAAMC,0BAA0B,6BAAhC,CACP,AAAO,AACP,AAAO;;ACLP;;AAEA,AAKA;;AAEA,AAAO,SAASC,cAAT,CAAyBC,aAAzB,EAAwC;MACzCC,sCAAsC,IAA1C;wCACsCA,uCAAuC,CAACD,cAAcF,uBAAd,CAA9E;wCACsCG,uCAAuC,CAACD,cAAcH,kCAAd,CAA9E;;SAEOI,mCAAP;;;AAGF,AAAO,SAASC,YAAT,CAAuBF,aAAvB,EAAsC;gBAC7BH,kCAAd,IAAoD,IAApD;;;AClBF;;AAEA,AAIA,AAEA,AACA,AAEA;;IAEQM,4BAA4BC,uCAA5BD;;;;AAIR,IAAaE,iCAAb;;;;;WACE;;mBAAA,EAKEC,kBALF,EAMEC,aANF,EAOEC,aAPF,EAQEC,OARF,EASEC,QATF,EAUEC,UAVF,EAWE;;;qKAEEC,iBAFF,EAGEN,kBAHF,EAIEC,aAJF,EAKEC,aALF,EAMEC,OANF,EAOEC,QAPF,EAQEC,UARF;;UAUKE,gBAAL,GAAwBC,UAAUC,GAAV,CAAcnB,yBAAd,CAAxB;;;;;;yCAGoBI,aAzBxB,EAyBuCgB,eAzBvC,EAyBwD;sBACpCC,gCAAkBjB,aAAlB,CAAhB;UACMkB,OAAO,KAAKC,eAAL,CAAqBJ,GAArB,CAAyBf,aAAzB,CAAb;;UAEI,CAACkB,IAAD,IAAS,CAACnB,eAAeC,aAAf,CAAd,EAA6C;yLACTA,aAAlC,EAAiDgB,eAAjD;;;;;mBAKWhB,aAAb;;uLAEkCA,aAAlC,EAAiDgB,eAAjD;;;;EArCmDb,yBAAvD;;AAyCAE,kCAAkCe,cAAlC;;AAEEjB,0BAAwBiB,cAAxB,CAAuCC,GAAvC,CAA2C,UAACC,KAAD;SAAY,EAACC,MAAMD,MAAMC,IAAb,EAAZ;CAA3C,CAFF;AAGAlB,kCAAkCe,cAAlC,CAAiDI,OAAjD,CAAyD,EAAED,MAAME,sBAAR,EAAzD;;AC7DA;;AAEA,AAIA,AACA,AAEA;;IAEQtB,0BAA4BC,uCAA5BD;;;;AAIR,AAAO,IAAMuB,4BAA4B,2BAAlC;;AAEP,AAAO,IAAMC,uBAAuB,CAClC,EAACC,SAASzB,uBAAV,EAAmC0B,UAAUxB,iCAA7C,EADkC,EAGlCT,yBAHkC,CAA7B;;ACjBP;;AAEA;;;;;;;;;"}
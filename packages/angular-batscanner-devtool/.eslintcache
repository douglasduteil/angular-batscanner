{"/home/x/zzz/github/douglasduteil/angular-batscanner/packages/angular-batscanner-devtool/scripts/build.js":{"size":1513,"mtime":1475442347659,"hashOfConfig":"7wzn3","results":{"filePath":"/home/x/zzz/github/douglasduteil/angular-batscanner/packages/angular-batscanner-devtool/scripts/build.js","messages":[],"errorCount":0,"warningCount":0}},"/home/x/zzz/github/douglasduteil/angular-batscanner/packages/angular-batscanner-devtool/src/devtool/devtool_module.js":{"size":596,"mtime":1475407029782,"hashOfConfig":"7wzn3","results":{"filePath":"/home/x/zzz/github/douglasduteil/angular-batscanner/packages/angular-batscanner-devtool/src/devtool/devtool_module.js","messages":[],"errorCount":0,"warningCount":0}},"/home/x/zzz/github/douglasduteil/angular-batscanner/packages/angular-batscanner-devtool/src/devtool/navbar_component.js":{"size":1040,"mtime":1475443693247,"hashOfConfig":"7wzn3","results":{"filePath":"/home/x/zzz/github/douglasduteil/angular-batscanner/packages/angular-batscanner-devtool/src/devtool/navbar_component.js","messages":[],"errorCount":0,"warningCount":0}},"/home/x/zzz/github/douglasduteil/angular-batscanner/packages/angular-batscanner-devtool/src/index.js":{"size":52,"mtime":1474843658425,"hashOfConfig":"7wzn3","results":{"filePath":"/home/x/zzz/github/douglasduteil/angular-batscanner/packages/angular-batscanner-devtool/src/index.js","messages":[],"errorCount":0,"warningCount":0}},"/home/x/zzz/github/douglasduteil/angular-batscanner/packages/angular-batscanner-devtool/src/devtool/graph/graph_component_little_flame_trial.js":{"size":5146,"mtime":1475438553406,"hashOfConfig":"7wzn3","results":{"filePath":"/home/x/zzz/github/douglasduteil/angular-batscanner/packages/angular-batscanner-devtool/src/devtool/graph/graph_component_little_flame_trial.js","messages":[],"errorCount":0,"warningCount":0}},"/home/x/zzz/github/douglasduteil/angular-batscanner/packages/angular-batscanner-devtool/src/devtool/graph/graph_component.js":{"size":7421,"mtime":1475455740315,"hashOfConfig":"7wzn3","results":{"filePath":"/home/x/zzz/github/douglasduteil/angular-batscanner/packages/angular-batscanner-devtool/src/devtool/graph/graph_component.js","messages":[],"errorCount":0,"warningCount":0,"output":"//\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core'\n\nimport * as d3 from 'd3'\n\n//\n\nexport const RootSvgGraphComponent =\nComponent({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.Native,\n  inputs: [\n    'state'\n  ],\n  selector: 'bd-graph',\n  styles: [`\n    :host {\n      display: flex;\n    }\n\n    svg {\n      flex: 1;\n    }\n\n    .flame-chart-entry-info {\n      z-index: 200;\n      position: absolute;\n      background-color: white;\n      pointer-events: none;\n      padding: 2px;\n      box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05), 0 2px 4px rgba(0, 0, 0, 0.2), 0 2px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .axis path,\n    .axis line {\n      fill: none;\n      stroke: #000;\n      shape-rendering: crispEdges;\n    }\n\n    .area {\n      fill: lightsteelblue;\n    }\n\n    .line {\n      fill: none;\n      stroke: steelblue;\n      stroke-width: 1.5px;\n    }\n\n    .dot {\n      fill: white;\n      stroke: steelblue;\n      stroke-width: 1.5px;\n    }\n\n    .zoom {\n      cursor: move;\n      fill: none;\n      pointer-events: all;\n    }\n  `],\n  queries: {\n    svgElement: new ViewChild('mySvg'),\n    tooltipElement: new ViewChild('myTooltip')\n  },\n  template: `\n  <svg\n   #mySvg\n   xmlns=\"http://www.w3.org/2000/svg\"\n   version=\"1.1\"\n  >\n  </svg>\n\n  <div class=\"flame-chart-entry-info\" #myTooltip>\n  </div>\n  `\n})\n.Class({\n  constructor: [ElementRef, function RootSvgGraphComponent (elementRef) {\n    this._element = elementRef.nativeElement\n    this.data = []\n  }],\n\n  ngOnChanges (changes) {\n    if (changes.state && this._render) {\n      console.log('new state', this.state)\n\n      this._render(this.state)\n    }\n  },\n\n  ngAfterViewInit () {\n    this._initializeGraph(\n      this.svgElement.nativeElement,\n      this.tooltipElement.nativeElement\n    )\n  },\n\n  //\n\n  _initializeGraph (svgElement, tooltipElement) {\n    console.log('new graph', svgElement, tooltipElement)\n/*\n    const margin = {top: 20, right: 20, bottom: 110, left: 40}\n    const margin2 = {top: 500, right: 20, bottom: 30, left: 40}\n\n    const svg = d3.select(svgElement)\n    // d3.select(window).on('resize', resize)\n    const width = +svg.attr(\"width\") - margin.left - margin.right\n    const height = +svg.attr(\"height\") - margin.top - margin.bottom\n    //const height2 = +svg.attr(\"height\") - margin2.top - margin2.bottom\n    const height2 = height - margin2.top - margin2.bottom */\n// START\n\n    const svgWidth = svgElement.clientWidth\n    const svgHeight = svgElement.clientHeight\n    const svg = d3.select(svgElement)\n    const margin = {top: 90, right: 0, bottom: 30, left: 0}\n    const margin2 = {top: 0, right: 0, bottom: svgHeight - 50, left: 0}\n    const width = svgWidth - margin.left - margin.right\n    const height = svgHeight - margin.top - margin.bottom\n    const height2 = svgHeight - margin2.top - margin2.bottom\n\n    //\n\n    const x = d3.scaleTime().range([0, width])\n    const x2 = d3.scaleTime().range([0, width])\n    const y = d3.scaleLinear().range([0, height])\n    const y2 = d3.scaleLinear().range([height2, 0])\n\n    this._axis = {x, x2, y, y2}\n\n    //\n\n    const xAxis = d3.axisBottom(x)\n    const xAxis2 = d3.axisBottom(x2)\n\n    const brush = d3.brushX()\n      .extent([[0, 0], [width, height2]])\n      .on('brush end', brushed)\n\n    var zoom = d3.zoom()\n    .scaleExtent([1, Infinity])\n    .translateExtent([[0, 0], [width, height]])\n    .extent([[0, 0], [width, height]])\n    .on('zoom', zoomed)\n\n    var line = d3.line()\n    .defined((d) => Boolean(d))\n    .x(function (d) { return x(d.timestamp) })\n    .y(function (d) { return y(d.id) })\n\n    var area = d3.area()\n    .curve(d3.curveStepAfter)\n    .defined(line.defined())\n    .x(line.x())\n    .y1(line.y())\n\n    var area2 = d3.area()\n    .curve(d3.curveStepAfter)\n    .defined(line.defined())\n    .x(function (d) { return x2(d.timestamp) })\n    .y1(function (d) { return y2(d.id) })\n\n    svg.append('defs').append('clipPath')\n    .attr('id', 'clip')\n  .append('rect')\n    .attr('width', width)\n    .attr('height', height)\n\n    var context = svg.append('g')\n    .attr('class', 'context')\n    .attr('transform', 'translate(' + margin2.left + ',' + margin2.top + ')')\n\n    var focus = svg.append('g')\n    .attr('class', 'focus')\n    .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n    //\n\n    const focusAreaPath = focus.append('path')\n    .attr('class', 'area')\n\n    focus.append('g')\n    .attr('class', 'axis axis--x')\n    .call(xAxis)\n\n    const focusLinePath = focus.append('path')\n    .attr('class', 'line')\n\n    const contextAreaPath = context.append('path')\n    .attr('class', 'area')\n\n    context.append('g')\n    .attr('class', 'axis axis--x')\n    .call(xAxis2)\n\n    context.append('g')\n      .attr('class', 'brush')\n      .call(brush)\n      // .call(brush.move, x.range())\n\n    svg.append('rect')\n    .attr('class', 'zoom')\n    .attr('width', width)\n    .attr('height', height)\n    .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n    .call(zoom)\n\n    //\n\n    this._render = render\n\n    //\n\n    function brushed () {\n      if (d3.event.sourceEvent && d3.event.sourceEvent.type === 'zoom') return // ignore brush-by-zoom\n      var s = d3.event.selection || x2.range()\n      x.domain(s.map(x2.invert, x2))\n\n      focusAreaPath.attr('d', area)\n      focus.select('.axis--x').call(xAxis)\n      svg.select('.zoom').call(zoom.transform, d3.zoomIdentity\n      .scale(width / (s[1] - s[0]))\n      .translate(-s[0], 0))\n    }\n\n    function zoomed () {\n      if (d3.event.sourceEvent && d3.event.sourceEvent.type === 'brush') return // ignore zoom-by-brush\n      var t = d3.event.transform\n      x.domain(t.rescaleX(x2).domain())\n      focus.select('.area').attr('d', area)\n      focus.select('.axis--x').call(xAxis)\n      context.select('.brush').call(brush.move, x.range().map(t.invertX, t))\n    }\n\n    function render (data) {\n      if (!data || !this._axis) {\n        return\n      }\n\n      x.domain(d3.extent(data, function (d) { return d && d.timestamp }))\n      y.domain([0, d3.max(data, function (d) { return d && d.id })])\n      x2.domain(x.domain())\n      y2.domain(y.domain())\n\n      //   .attr('d', area)\n      focusAreaPath.data([data]).attr('d', area)\n      focusLinePath.data([data]).attr('d', line)\n      contextAreaPath.data([data]).attr('d', area2)\n\n      focus.select('.axis').call(xAxis)\n      context.select('.axis').call(xAxis2)\n      context.select('.axis').call(xAxis2)\n\n      const dots = focus.selectAll('.dot')\n          .data(data.filter(function (d) { return d }))\n      dots.enter().append('circle')\n          .attr('class', 'dot')\n          .attr('cx', line.x())\n          .attr('cy', line.y())\n          .attr('r', 3.5)\n\n      dots.exit().remove()\n      // .data(data)\n      // .enter()\n      // .call(xAxis)\n\n      // context.selectAll('.area')\n      // .data(data)\n      // .enter()\n\n      // context.selectAll('.axis')\n      // .data(data)\n      // .enter()\n      // .call(xAxis2)\n\n      // context.selectAll('.brush')\n      // .data(data)\n      // .enter()\n    }\n  }\n\n  //\n})\n\nconst BrushXComponent =\nDirective({\n  selector: '[bd-brush-x]'\n})\n.Class({\n  constructor: [ElementRef, function RootSvgGraphComponent (elementRef) {\n    this._element = elementRef.nativeElement\n  }],\n\n  ngOnInit () {\n  }\n})\n\n//\n\nexport const GraphComponent = [\n  RootSvgGraphComponent,\n  BrushXComponent\n]\n"}}}